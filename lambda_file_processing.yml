AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: CFN template to create architecture represented at https://aws.amazon.com/blogs/compute/fanout-s3-event-notifications-to-multiple-endpoints/.
Resources:
  ProcessorFunctionOne:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: data-processor-1.handler
      Runtime: nodejs10.x
      CodeUri: ./src/data-processor-1/
      Role: !GetAtt [LambdaExecutionRole, Arn]
      
  ProcessorFunctionTwo:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: data-processor-2.handler
      Runtime: nodejs10.x
      CodeUri: ./src/data-processor-2/
      Role: !GetAtt [LambdaExecutionRole, Arn]

  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref 'AWS::StackName', !Ref 'AWS::AccountId', files]]
      NotificationConfiguration:
        TopicConfigurations:
        - Event: s3:ObjectCreated:*
          Topic: !Ref 'InputNotificationTopic'
    DependsOn: NotificationPolicy
  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref 'InputBucket', out]]
  InputNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !GetAtt [ProcessorFunctionOne, Arn]
        Protocol: lambda
      - Endpoint: !GetAtt [ProcessorFunctionTwo, Arn]
        Protocol: lambda
  NotificationPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: PushBucketNotificationPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: AllowBucketToPushNotificationEffect
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action: sns:Publish
          Resource: !Ref 'InputNotificationTopic'
          Condition:
            ArnLike:
              aws:SourceArn: !Join ['', ['arn:aws:s3:*:*:', !Join ['-', [!Ref 'AWS::StackName',
                      !Ref 'AWS::AccountId', files]]]]
      Topics:
      - !Ref 'InputNotificationTopic'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
  RolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource: !Join ['', ['arn:aws:s3:::', !Ref 'InputBucket', /*]]
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource: !Join ['', ['arn:aws:s3:::', !Ref 'OutputBucket', /*]]
      Roles:
      - !Ref 'LambdaExecutionRole'
  LambdaInvokePermissionOne:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [ProcessorFunctionOne, Arn]
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'InputNotificationTopic'
  LambdaInvokePermissionTwo:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [ProcessorFunctionTwo, Arn]
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'InputNotificationTopic'
Outputs:
  Bucket:
    Description: Storage location for data which is to be processed by Lambda functions
    Value: !Ref 'InputBucket'
  BucketOut:
    Description: Storage location for data which is to be processed by Lambda functions
    Value: !Ref 'OutputBucket'
  Topic:
    Description: SNS topic to fanout S3 Event notifications to Lambda functions
    Value: !Ref 'InputNotificationTopic'
  ProcessorFnOne:
    Description: Lambda function receiving SNS messages of S3 events
    Value: !Ref 'ProcessorFunctionOne'
  ProcessorFnTwo:
    Description: Lambda function receiving SNS messages of S3 events
    Value: !Ref 'ProcessorFunctionTwo'




  